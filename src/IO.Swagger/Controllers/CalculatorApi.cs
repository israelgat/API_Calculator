/*
 * Calculator API
 *
 * API for performing arithmetic operations on two numbers
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;
using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class CalculatorApiController : ControllerBase
    {
        /// <summary>
        /// Perform an arithmetic operation on two numbers
        /// </summary>
        /// <remarks>Accepts two numbers in the request body and an operation type in the header, then returns the calculation result</remarks>
        /// <param name="body"></param>
        /// <param name="operation">The type of arithmetic operation (Add, Subtract, Multiply, Divide)</param>
        /// <response code="200">Successful calculation result</response>
        /// <response code="400">Invalid parameters or operation</response>
        /// <response code="401">Unauthorized (invalid or missing JWT)</response>
        /// <response code="500">Internal server error</response>
        [HttpPost]
        [Route("/calculate")]
        [Authorize(AuthenticationSchemes = Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerDefaults.AuthenticationScheme)]
        [ValidateModelState]
        [SwaggerOperation("Calculate")]
        [SwaggerResponse(statusCode: 200, type: typeof(InlineResponse200), description: "Successful calculation result")]
        public virtual IActionResult Calculate([FromBody]CalculateBody body, [FromHeader][Required()]string operation)
        {
            if (body == null)
                return BadRequest("Request body cannot be null.");

            if (string.IsNullOrWhiteSpace(operation))
                return BadRequest("Operation header is required.");

            double result;

            switch (operation.ToLower())
            {
                case "add":
                    result = body.Num1 + body.Num2;
                    break;
                case "subtract":
                    result = body.Num1 - body.Num2;
                    break;
                case "multiply":
                    result = body.Num1 * body.Num2;
                    break;
                case "divide":
                    if (body.Num2 == 0)
                        return BadRequest("Division by zero is not allowed.");
                    result = body.Num1 / body.Num2;
                    break;
                default:
                    return BadRequest("Invalid operation. Supported: Add, Subtract, Multiply, Divide.");
            }

            var response = new InlineResponse200 { Result = result };
            return Ok(response);
        }
    }
}
